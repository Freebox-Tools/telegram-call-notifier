// Importer les libs
const { FreeboxClient } = require("freebox-wrapper");
const fs = require('fs');
require('dotenv').config();
const { Telegraf } = require('telegraf')
var bot = new Telegraf(process.env.BOT_TOKEN)
var id = process.env.TELEGRAM_ID

// Supabase
var { createClient } = require("@supabase/supabase-js")
var supabase = createClient(process.env.SUPABASE_LINK, process.env.SUPABASE_PUBLIC_KEY)
// TODO: on pr√©cisera dans Le README qu'il faut pas leak la SUPABASE_PUBLIC_KEY mm si le nom indique qu'elle est publique, c'est pas vrm le cas
// TODO: on pr√©cisera aussi dans le README d'activer les RLS (voir celle d√©j√† d√©finit dans la base de donn√©es)

// Liste des r√©ponses d'utilisateur qu'on attend
var waitingForReplies = []

// On initialise le client
const freebox = new FreeboxClient({
	appId: 'fbx.notifier',
	appToken: process.env.FREEBOX_TOKEN,
	apiDomain: process.env.FREEBOX_DOMAIN,
	httpsPort: process.env.FREEBOX_PORT
})

// Liste des noms des Freebox
function getFreeboxName(name){
	if(name.includes("Freebox Server Mini")) return "Freebox Mini 4K"
	if(name.includes("Freebox Delta")) return "Freebox Delta"
	if(name.includes("Freebox Pop")) return "Freebox Pop"
	if(name.includes("Freebox R√©volution") || name.includes("Freebox Revolution")) return "Freebox R√©volution"
	if(name.includes("Freebox One")) return "Freebox One"
	if(name.includes("Freebox Server")) return "Freebox Server"
	return "Freebox"
}

// Fonction principale
async function main() {
	// On s'authentifie
	var response = await freebox.authentificate()

	// Si on a pas pu s'authentifier
	if(!response?.success) return console.log("Impossible de se connecter √† la Freebox : ", response.msg || response)
	else console.log("Connect√© √† Freebox OS sur " + getFreeboxName(freebox.freebox.box_model_name))

	// Lancer le bot
	bot.launch()

	// Commencer la fonction logCalls
	logCalls()

	// Commande start du bot pour une premi√®re connexion en lui expliquant au fur et √† mesure
	bot.command('start', (ctx) => {
		ctx.replyWithHTML(`
Bienvenue dans Freebox Call Notifier ! Ce bot vous permet de recevoir une notification lors d'un appel entrant sur votre Freebox.

Pour associer une Freebox √† votre compte Telegram, vous devrez utiliser l'assistant de configuration via terminal sur un ordinateur connect√© au m√™me r√©seau que votre Freebox.

1. Assurez-vous d'avoir <a href="https://nodejs.dev/fr/download/">Node.js</a> install√© sur votre ordinateur.
2. Ouvrez un terminal ("Invite de commandes" sur Windows).
3. Dans ce terminal, entrez la commande suivante : <code>npx freebox-notifier-cli</code>
4. Suivez les instructions affich√©es dans le terminal.

En cas de probl√®me, vous pouvez contacter <a href="https://t.me/el2zay">el2zay</a>.`
		, { disable_web_page_preview: true, allow_sending_without_reply: true }).catch(err => {})
	})

	// Commande logout
	bot.command('logout', async (ctx) => {
		// Cr√©er un identifiant unique pour les boutons
		var id = Date.now();

		// Demander √† l'utilisateur de confirmer
		var replyMarkup = {
			inline_keyboard: [
				[
					{
						text: "Se d√©connecter",
						callback_data: `yes-${id}`
					},
					{
						text: "Annuler",
						callback_data: `no-${id}`
					},
				]
			]
		};

		// Afficher un message d'attention avec les boutons.
		ctx.replyWithHTML("‚ö†Ô∏è <b>ATTENTION :</b> Lors de la d√©connexion, toutes les donn√©es enregistr√©es sur nos serveurs seront supprim√©es et vous ne serez plus notifi√© lors d'un appel entrant.\nSi vous souhaitez vous reconnecter plus tard, vous devrez recommencer le processus d'installation via terminal.\n\n<b>√ätes-vous s√ªr de vouloir vous d√©connecter ?</b>", {
			reply_markup: replyMarkup
		}).catch(err => {})

		// Si on annule
		bot.action(`no-${id}`, async (ctx) => {
			// R√©pondre et supprimer le message
			ctx.answerCbQuery("Action annul√© ! Vous ne serez pas d√©connect√©.").catch(err => {})
			ctx.deleteMessage().catch(err => {})
		})

		// Si on confirme
		bot.action(`yes-${id}`, async (ctx) => {
			// Supprimer les informations de la base de donn√©es
			var { error } = await supabase.from("users").delete().match({ userId: ctx?.update?.callback_query?.from?.id })
			if(error) return ctx.answerCbQuery("Une erreur est survenue lors de la d√©connexion : " + error.message).catch(err => {})

			// R√©pondre et supprimer le message
			ctx.deleteMessage().catch(err => {})
			ctx.reply("Vous avez √©t√© d√©connect√©. Une attente de quelques minutes est n√©cessaire avant la suppression totale de vos donn√©es.").catch(err => {})

			// On se d√©cconecte de la Freebox (on v√©rifie pas l'erreur)
			await freebox.fetch({
				method: "POST",
				url: "v10/login/logout/",
				parseJson: true
			})
		})
	})

	// Commande voicemail
	bot.command('voicemail', async (ctx) => {
		await sendVoicemail(ctx);
	})

	// Commande createcontact
	bot.command('createcontact', (ctx) => {
		// Demander √† l'utilisateur d'envoyer un message
		ctx.reply("Veuillez envoyer le nom du contact ainsi que son num√©ro, s√©par√© par une virgule\nExemple : Jean, 0123456789").catch(err => {})

		// On attend la r√©ponse de l'utilisateur
		if(waitingForReplies.find(e => e.userId == ctx.message.from.id)) waitingForReplies = waitingForReplies.filter(e => e.userId != ctx.message.from.id)
		waitingForReplies.push({
			userId: ctx.message.from.id,
			created: Date.now(),
			type: "createcontact-via-cmd",
			ctx: ctx
		})
	})

	// Commande mynumber
	bot.command('mynumber', async (ctx) => {
		ctx.reply("Votre num√©ro de t√©l√©phone fixe est le : " + await myNumber()).catch(err => {})
	})

	// Action du bouton "Cr√©er un contact"
	bot.action('createcontact', async (ctx) => {
		// D√©terminer le num√©ro de t√©l√©phone
		var message = ctx.callbackQuery.message.text
		var num = message.split("de")[1].split("(")[0].trim()

		// Si le num√©ro est masqu√©, ne rien faire
		if(num == "Num√©ro masqu√©") return ctx.answerCbQuery("Impossible de cr√©er le contact puisque le num√©ro est masqu√©.").catch(err => {})

		// Demander le nom du contact
		ctx.reply(`Veuillez envoyer le nom du contact √† ajouter au num√©ro "${num}"`).catch(err => {})

		// On attend la r√©ponse de l'utilisateur
		if(waitingForReplies.find(e => e.userId == ctx.callbackQuery.from.id)) waitingForReplies = waitingForReplies.filter(e => e.userId != ctx.callbackQuery.from.id)
		waitingForReplies.push({
			userId: ctx.callbackQuery.from.id,
			created: Date.now(),
			type: "createcontact-via-btn",
			ctx: ctx,
			num: num
		})
	})
	
	// D√©tecter l'envoi d'un message
	// Note: Ce code doit rester en dessous des autres commandes, jsp pourquoi c'est comme √ßa üíÄüíÄ
	bot.on('message', async (ctx) => {
		// Emp√™cher un message envoy√© avant le d√©marrage du bot d'√™tre trait√©
		if(ctx?.message?.date && ctx.message.date < Math.floor(Date.now() / 1000) - 10) return console.log("Un message envoy√© avant le d√©marrage du bot a √©t√© ignor√©.")

		// Texte originale
		var text = ctx?.message?.text || ctx?.callbackQuery?.message?.text
		if(text) text = text.trim()
		if(!text) return

		// Auteur du message
		var author = ctx?.message?.from?.id || ctx?.update?.callback_query?.from?.id || ctx?.callbackQuery?.from?.id

		// R√©cup√©rer le message et v√©rifier que c'est un code
		var parsedText = parseInt(text)
		if(!parsedText || (parsedText && (isNaN(parsedText) || text.length != 6))){ // Si c'est PAS un code
			// On r√©cup√®re si on doit attendre une r√©ponse de l'utilisateur
			var waitingForReply = waitingForReplies.find(e => e.userId == author)
			if(!waitingForReply) return // Si on attend pas de r√©ponse, on ne fait rien
			if(waitingForReply.created < Date.now() - (1000 * 60 * 10)) waitingForReplies = waitingForReplies.filter(e => e.userId != author) // On laisse max 10 minutes pour r√©pondre

			// On r√©cup√®re le type de r√©ponse qu'on attend
			var type = waitingForReply.type
			if(type == "createcontact-via-cmd"){ // Si on attend une r√©ponse pour cr√©er un contact via la commande
				// On r√©cup√®re le nom et le num√©ro
				var name = text.split(",")[0];
				var num = text.split(",")[1];

				// Si il n y a pas de virgule expliquez comment il faut faire.
				if(!name) return ctx.replyWithHTML("Veuillez envoyer le nom du contact ainsi que son num√©ro, s√©par√© par une virgule\nExemple : <b>Jean</b>, 0123456789").catch(err => {})
				if(!num) return ctx.replyWithHTML("Veuillez envoyer le nom du contact ainsi que son num√©ro, s√©par√© par une virgule\nExemple : Jean, <b>0123456789</b>").catch(err => {})

				// On cr√©√© le contact
				var created = await createContact(name, num);

				// Si il y a une erreur, informer l'utilisateur
				if(created != true) return ctx.reply(`Une erreur est survenue${created == false ? '...' : ` : ${created}`}`).catch(err => {})
				else ctx.reply("Le contact a bien √©t√© cr√©√©.").catch(err => {})

				// On supprime l'attente
				waitingForReplies = waitingForReplies.filter(e => e.userId != author)
			}
			else if(type == "createcontact-via-btn"){ // Si on attend une r√©ponse pour cr√©er un contact via le bouton
				// On cr√©√© le contact
				var created = await createContact(text, waitingForReply.num);

				// Si il y a une erreur, informer l'utilisateur
				if(created != true) return ctx.reply(`Une erreur est survenue${created == false ? '...' : ` : ${created}`}`).catch(err => {})
				else ctx.reply("Le contact a bien √©t√© cr√©√©.").catch(err => {})

				// On supprime l'attente
				waitingForReplies = waitingForReplies.filter(e => e.userId != author)
			}
		} else { // Si c'est un code valide :
			// Obtenir le code unique dans la base de donn√©es
			var { data, error } = await supabase.from("uniquecode").select("*").eq("code", text)
			if(error) return ctx.reply("Une erreur est survenue et nous n'avons pas pu r√©cup√©rer les informations de ce code dans la base des donn√©es. Veuillez signaler ce probl√®me.").catch(err => {})

			// Si on a pas de donn√©es
			if(!data?.length) return ctx.reply("Oups, on dirait bien que ce code n'existe pas. Celui-ci a peut-√™tre expir√©, ou est mal √©crit. Dans le cas o√π vous h√©bergez vous-m√™me le service, v√©rifier que vous avez entr√© la bonne URL d'API lors de l'utilisation du CLI.").catch(err => {})

			// Si on a un code, on l'associe √† l'utilisateur
			var { error } = await supabase.from("uniquecode").delete().match({ code: text })
			if(error) ctx.reply("Nous n'avons pas pu supprimer ce code d'association, il expirera tout de m√™me dans moins d'une heure. Veuillez signaler ce probl√®me.").catch(err => {})

			// Si on a des donn√©es, on v√©rifie qu'elles ne sont pas expir√©es
			var infos = data?.[0]
			if(infos?.created){
				var created = new Date(data.created)
				if(created < new Date(Date.now() - (1000 * 60 * 50))) return ctx.reply("Oups, on dirait bien que ce code a expir√©. Veuillez en g√©n√©rer un nouveau.").catch(err => {}) // 50 minutes
			}

			// On v√©rifie que l'utilisateur n'a pas d√©j√† associ√© une box
			var { data, error } = await supabase.from("users").select("*").eq("userId", ctx.message.from.id)
			if(error) return ctx.reply("Une erreur est survenue et nous n'avons pas pu v√©rifier si vous avez d√©j√† associ√© une Freebox √† votre compte. Veuillez signaler ce probl√®me.").catch(err => {})
			if(data?.length) return ctx.reply("Vous avez d√©j√† associ√© une Freebox √† votre compte, utiliser /logout pour la supprimer.").catch(err => {})

			// On associe le code √† l'utilisateur
			var { error } = await supabase.from("users").insert({
				id: Date.now() + Math.floor(Math.random() * 1000000).toString(),
				userId: ctx.message.from.id,
				chatId: ctx.message.chat.id,
				appId: "fbox.notifier",
				appToken: infos?.content?.appToken,
				apiDomain: infos?.content?.apiDomain,
				httpsPort: infos?.content?.httpsPort,
				boxModel: infos?.content?.boxModel,
				created: new Date()
			})
			if(error) console.log(error)
			if(error) return ctx.reply("Une erreur est survenue et nous n'avons pas pu vous associer √† votre Freebox. Veuillez signaler ce probl√®me.").catch(err => {})

			// On informe l'utilisateur que tout s'est bien pass√©
			ctx.reply(`Votre compte Telegram a bien √©t√© associ√© √† votre ${getFreeboxName(infos?.content?.boxModel)}. Vous pouvez d√©sormais utiliser les commandes du bot et vous recevrez un message lors d'un appel entrant.`).catch(err => {})
		}
	})
}
main().catch((err) => console.error(err));

async function logCalls() {
	var number;
	// Obtenir les derniers appels
	var response = await freebox.fetch({
		method: "GET",
		url: "v10/call/log/",
		parseJson: true
	});
	if(!response.success) return console.log("Impossible de r√©cup√©rer les derniers appels : ", response.msg || response)

	// On r√©cup√®re le dernier appel
	lastID = response?.result?.[0]?.id || null

	// Boucle infinie qui v√©rifie si un nouvel appel est re√ßu
	while (true) {
		// Obtenir les derniers appels
		var response = await freebox.fetch({
			method: "GET",
			url: "v10/call/log/",
			parseJson: true
		})

		// Si il y a une erreur, informer l'utilisateur
		// Peut arriver si l'utilisateur a d√©connect√© l'app depuis son Freebox OS, ou que sa box down
		if(!response.success) return console.log("Impossible de r√©cup√©rer les derniers appels : ", response.msg || response)

		// Si le dernier appel est diff√©rent du dernier appel enregistr√©
		response = response?.result?.[0] || null
		if(!response) continue // Si on a pas de r√©ponse, on continue
		if(lastID != response.id) {
			// On obtient les infos, et on d√©finit l'ID du dernier appel enregistr√©
			number = response.number;
			var name = response.name;
			lastID = response.id;

			// On ignore les appels qui ne sont pas entrants
			if(response.type == "outgoing") continue

			// Si l'appel est entrant
			var replyMarkup = null;
			if(number == name) {
				replyMarkup = {
					inline_keyboard: [
						[{
							text: "Cr√©er un contact",
							callback_data: "createcontact"
						}]
					]
				};
			}
			bot.telegram.sendMessage(id, `Nouvel appel entrant de ${name || "Num√©ro masqu√©"}${number != name ? ` (${number || "Num√©ro masqu√©"})` : ''}`, {
				reply_markup: replyMarkup
			});
		}
	}
}

// Cr√©er un contact
async function createContact(name, num) {
	// Cr√©er un contact
	const response = await freebox.fetch({
		method: "POST",
		url: "v10/contact/",
		body: JSON.stringify({
			display_name: name, // Avec son nom uniquement, pour l'instant
		}),
		parseJson: true
	});

	// R√©cup√©rer l'ID du contact
	const id = response.result.id;

	// Ajouter le num√©ro au contact
	const addNumber = await freebox.fetch({
		method: "POST",
		url: "v10/number/",
		body: JSON.stringify({
			contact_id: id,
			number: num, // Lui d√©finir le num√©ro
		}),
		parseJson: true
	});

	return addNumber?.success || addNumber?.msg || false
}

// Obtenir le num√©ro de t√©l√©phone
async function myNumber() {
	const response = await freebox.fetch({
		method: "GET",
		url: "v10/call/account/",
		parseJson: true
	})
	return response?.result?.phone_number;
}

// Envoyer le dernier message vocal dans le r√©pondeur
async function sendVoicemail(ctx) {
	// Obtenir les messages vocaux
	var response = await freebox.fetch({
		method: "GET",
		url: "v10/call/voicemail/",
		parseJson: true
	});

	// Si on a une erreur
	if(!response.success) return ctx.reply("Impossible de r√©cup√©rer les derniers appels : ", response.msg || response).catch(err => {})

	// On trie pour avoir le plus r√©cent
	response = response?.result || []
	response = response.sort((a, b) => b.date - a.date)

	// Si on a rien
	if(!response.length) return ctx.reply("Vous n'avez aucun message vocal.").catch(err => {})

	// On t√©l√©charge le message vocal
	var responseAudio = await freebox.fetch({
		method: "GET",
		url: `v10/call/voicemail/${response?.[0]?.id}/audio_file/`
	})

	// (au cas o√π y'a une erreur de l'API et donc on peut pas obtenir le buffer)
	try {
		// On r√©cup√®re le buffer
		responseAudio = await responseAudio.buffer()

		// On l'enregistre
		var randomid = Math.floor(Math.random() * 1000000).toString()
		fs.writeFile(`${randomid}_audio.wav`, responseAudio, function (err) {
			if(err) throw err
		})

		// On envoie le message vocal
		await ctx.replyWithVoice({ source: `${randomid}_audio.wav` }).catch(err => {})

		// On supprime le message vocal local
		fs.unlink(`${randomid}_audio.wav`, function (err) {
			if(err) throw err
		})
	} catch (err) {
		ctx.reply("Impossible de r√©cup√©rer le message vocal : " + err.message).catch(err => {})
	}
}